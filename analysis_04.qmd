---
code-annotations: hover
reference-location: margin
---

# Combining (and Saving) Plots {#sec-combining-plots}

```{r}
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: "Show the code"

# Packages
library(rio) # <1> 
library(tidyverse) #<2> 
library(modelsummary) #<3>

#Load your data
demdata <- import("data/demdata.rds")
```

1.  For importing/exporting data
2.  For data manipulation & plotting
3.  For creating regression tables

Figures are great ways of presenting statistical information. There are times when we will want to include multiple figures in our papers. Sometimes it will even make sense to combine multiple figures into a single one. How can we do that?

## Example Using `patchwork`

Let's say that our paper was focused on investigating the relationship between inequality and democracy scores. Democracy, of course, is a complex concept. We can see this from the name of one of the most important sources of data on regime type available to researchers (emphasis mine): the *Varieties* of Democracy ([V-Dem](https://www.v-dem.net/){target="_blank"}) project. The V-Dem dataset, for instance, includes `v2x_polyarchy` which refers to the extent of electoral democracy, `v2x_libdem` which focuses on the extent of liberal democracy, and `v2x_egaldem` which focuses on the extent of egalitarian democracy.[^analysis_04-1] Perhaps we plan on analyzing all three indicators as DVs in our paper. We would naturally want to describe the nature of these variables at some point in our paper, i.e., provide some indication about their central tendency and how much they vary. We could do this rather simply in-text by telling the reader about the mean and standard deviation of each variable. ("My first dependent variable is a measure of electoral democracy from V-Dem. This variable measures blah blah blah (mean = X, SD = X). My second....") We could also provide a nice figure showing the degree of variation in these variables as well to supplement these discussions with a histogram making a lot of sense given the nature of these variables. For example:

[^analysis_04-1]: To say nothing of `v2x_partipdem` (participatory democracy) and `v2x_delibdem` (deliberative democracy)!

```{r}
#| message: false
#| warning: false

# Plot 1
poly_plot <- ggplot(demdata, aes(x = v2x_polyarchy)) + 
  geom_histogram(color = "black", fill = "white") + # <1> 
  labs(title = "Electoral Democracy", 
       x = NULL, y = "Count") + #<2>
  scale_x_continuous(limits = c(0,1)) # <3>

# Plot 2
lib_plot <- ggplot(demdata, aes(x = v2x_libdem)) + 
  geom_histogram(color = "black", fill = "white") +  
  labs(title = "Liberal Democracy", 
       x = NULL, y = "Count") + 
  scale_x_continuous(limits = c(0,1)) 


# Plot 3
egal_plot <- ggplot(demdata, aes(x = v2x_egaldem)) + 
  geom_histogram(color = "black", fill = "white") +  
  labs(title = "Egalitarian Democracy", 
       x = NULL, y = "Count") + 
  scale_x_continuous(limits = c(0,1)) 

#The output
poly_plot
lib_plot
egal_plot

```

1.  This alters how the histogram bars are presented. `fill=` covers the interior color, while `color` concerns the color of the borders.
2.  The title provides information of what the x-axis is showing, so I removed the x-axis label (`x = NULL`) to avoid redundancy.
3.  Sets the "limits" or range of the x-axis. Not strictly needed, but made sense here since I'm plotting different variables with the same theoretical range but potentially different observed minimums and maximums.

This is nice - we can see how much variation there is on the variables and also some differences between them (e.g., more countries at the higher levels of electoral democracy than liberal or egalitarian democracy). In terms of the paper, however, it might be a bit awkward to provide each histogram as its own figure - it's not *wrong* per se, but it would take up a lot of space in the paper. And, if we wanted our readers to compare across the different figures, then providing them separately (e.g., Figure 1, Figure 2, and Figure 3) might make that complicated and/or difficult since the figures will probably be provided on different pages of the document.

Instead of providing each plot separately, we can combine these different histograms into a single figure and include that in our thesis. We can then refer to that figure as we go. The `patchwork` package is one very useful package for doing this (see their [webpage](https://patchwork.data-imaginist.com/){target="_blank"} for all the different things you can do with this package).[^analysis_04-2]

[^analysis_04-2]: We could also "reshape" our data to accomplish these ends as well; see @sec-reshaping-datasets .

Here is an example:

```{r}
#| warning: false
#| message: false

#Load the package
library(patchwork) # <1>

#Combine the plots
poly_plot + lib_plot + egal_plot
```

1.  Normally we would load all of our packages at the very beginning of our script file.

The simplest way to combine plots with `patchwork` is by using a `+` sign as here. Doing so will create a figure like the one above where each successive plot is added to the right of the last one.

The plot above may not be the best looking version of our combined figure given the number of plots we're combining. They are currently a bit scrunched up since there is only so much horizontal space in the figure. Thankfully, we can use `patchwork` to combine the separate figures in different ways to avoid this issue (if we think it is a problem). For instance, we could stack each plot on top of each other (use more vertical space); this is generally done by using the `/` divider rather than a `+` sign. We could mix and match the `+` and `/` signs as in the second plot below. Or, we could explicitly specify how many rows there should be as in the third option.[^analysis_04-3]

[^analysis_04-3]: We could also specify the number of *columns* (`ncol = 2)` .

```{r}
#| message: false
#| warning: false

#One stacked on top of the other
poly_plot / lib_plot / egal_plot

#One plot on top, two side by side
poly_plot / (lib_plot + egal_plot)

#Setting the number of rows or columns
poly_plot + lib_plot + egal_plot + plot_layout(nrow = 2)

```

In this instance, I think either the first or third options works the best. I kind of like the first one because it best facilitates a comparison across the different variables. If that were not of interest (e.g., if one plot was a histogram of a continuous variable and another was a bar-plot of a categorical variable), then specifying the number of columns/rows might be better.

We can export this figure by storing the output as an object and then using `ggsave()` to save the image as a .png file. I will take one final step here when storing the final plot: I'll add a 'tag' ("A", "B", "C") to each plot. This makes it easier to reference the different components of the plot when writing about them (e.g,. "Plot A in Figure 1 shows....Meanwhile, Plot B...). [^analysis_04-4]

[^analysis_04-4]: Tagging, and the various ways one could modify these tags, is discussed on [this page](https://patchwork.data-imaginist.com/articles/guides/annotation.html){target="_blank"} of the `patchwork` website.

```{r}
#| warning: false
#| message: false

# Store
final_plot <- poly_plot / lib_plot / egal_plot + 
  plot_annotation(tag_levels = 'A')

#Save
ggsave("final_plot.png", 
       plot = final_plot, 
       height = 8, width = 12)
```

The `ggsave()` command works as follows:

`"final_plot.png"`

:   You begin by specifying the name of the output file. You can control the format here as well. I save the file as a .png file, which is a common figure output file type. There are other options, but this one should be sufficient for the thesis.

`plot = …`

:   I then tell the command what object should be saved in the figure. If this line is missing then `ggsave` will save the most recently produced plot...which may not be the one you want to save!

`height = ….`

:   I then specify the dimensions of the figure. These are in inches by default, but can be changed to other units as well (e.g., including `units = 'cm'` would allow you to control the size in centimeters; see the help file for `ggsave()` via entering `?ggsave()` in the R console for more information). This is usually a trial and error approach - save the image, open it up and see if it is distorted in some way, and then update as needed (make wider, make shorter, etc.).

The example above focused on combining histograms. This can of course be used with other types of plots, with combinations of types, and with coefficient plots. It is not always needed, but can make sense in some instances.
